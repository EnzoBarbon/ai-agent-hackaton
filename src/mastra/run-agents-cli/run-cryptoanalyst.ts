#!/usr/bin/env tsx

import fs from "fs";
import { cryptoanalystOutputSchema } from "../agents/cryptoanalyst-agent.js";
import { mastra } from "../index.js";

// Get command line arguments
const args = process.argv.slice(2);

if (args.length === 0) {
  console.error("Error: Se requiere el texto cifrado a descifrar");
  console.error("Uso: tsx run-cryptoanalyst.ts <texto-cifrado>");
  console.error(
    'Ejemplo: tsx run-cryptoanalyst.ts "HO VR√ë EU√ëOD HQ OD SODCD PD√ëRU."'
  );
  console.error("");
  console.error("Ejemplo de archivo:");
  console.error("tsx run-cryptoanalyst.ts --file texto_cifrado.txt");
  process.exit(1);
}

let cipherText: string;

// Check if using file input
if (args[0] === "--file") {
  if (args.length < 2) {
    console.error("Error: Se requiere la ruta del archivo");
    console.error("Uso: tsx run-cryptoanalyst.ts --file <ruta-del-archivo>");
    process.exit(1);
  }

  const filePath = args[1];

  // Check if file exists
  if (!fs.existsSync(filePath)) {
    console.error(`Error: El archivo ${filePath} no existe`);
    process.exit(1);
  }

  cipherText = fs.readFileSync(filePath, "utf-8").trim();
} else {
  // Use command line argument as cipher text
  cipherText = args.join(" ");
}

if (!cipherText.trim()) {
  console.error("Error: El texto cifrado no puede estar vac√≠o");
  process.exit(1);
}

async function analyzeCipher(cipherText: string) {
  try {
    console.log("üîê AN√ÅLISIS CRIPTOGR√ÅFICO");
    console.log("=".repeat(50));
    console.log(`üìù Texto cifrado: ${cipherText}`);
    console.log("=".repeat(50));

    console.log("\nü§ñ Iniciando an√°lisis con el agente criptoanalista...");

    // Get cryptoanalyst agent from Mastra instance (to use telemetry)
    const cryptoanalystAgent = mastra.getAgent("cryptoanalystAgent");

    const result = await cryptoanalystAgent.generate(cipherText, {
      output: cryptoanalystOutputSchema,
    });

    console.log("‚úÖ An√°lisis completado!\n");

    // Display results in a formatted way
    console.log("üéØ RESULTADOS DEL CRIPTOAN√ÅLISIS:");
    console.log("=".repeat(50));

    const data = result.object;

    if (data) {
      console.log("üìÑ INFORMACI√ìN DEL DESCIFRADO:");
      console.log(`   üí¨ Texto original: "${data.originalText}"`);
      console.log(`   üîì M√©todo de cifrado: ${data.encryptionMethod}`);
      console.log(`   üìä Confianza: ${data.confidence}`);

      if (data.additionalInfo) {
        console.log(`   ‚ÑπÔ∏è  Informaci√≥n adicional: ${data.additionalInfo}`);
      }

      console.log("\nüìà EVALUACI√ìN:");
      const confidence =
        typeof data.confidence === "number" ? data.confidence : 0;
      if (confidence >= 7) {
        console.log("   üü¢ Alta confianza - Descifrado muy probable");
      } else if (confidence >= 4) {
        console.log("   üü° Confianza media - Descifrado probable");
      } else if (confidence >= 1) {
        console.log("   üî∂ Baja confianza - Descifrado posible");
      } else {
        console.log("   üî¥ Muy baja confianza - Revisar resultado");
      }
    } else {
      console.log(
        "‚ùå No se pudo obtener un resultado estructurado del an√°lisis"
      );
    }

    console.log("\n" + "=".repeat(50));
    console.log("‚ú® Criptoan√°lisis completado");
  } catch (error) {
    console.error("‚ùå Error durante el criptoan√°lisis:", error);
    process.exit(1);
  }
}

// Run the cipher analysis
analyzeCipher(cipherText).catch((error) => {
  console.error("‚ùå Error inesperado:", error);
  process.exit(1);
});
