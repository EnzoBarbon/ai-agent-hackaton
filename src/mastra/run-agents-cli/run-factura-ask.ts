#!/usr/bin/env tsx

import fs from "fs";
import { extname } from "path";
import { runFacturaAnalysisWorkflow } from "../workflows/factura-analysis-workflow";

// Get command line arguments
const args = process.argv.slice(2);

if (args.length < 2) {
  console.error(
    "Error: Se requiere la ruta del archivo PDF y al menos una pregunta"
  );
  console.error(
    'Uso: tsx run-factura-ask.ts <ruta-del-archivo-pdf> "<pregunta1>" ["<pregunta2>"] [...]'
  );
  console.error(
    'Ejemplo: tsx run-factura-ask.ts ./factura.pdf "¬øCu√°l es mi IBAN?" "¬øQu√© d√≠a consum√≠ m√°s?"'
  );
  console.error("\nEjemplos de preguntas:");
  console.error('  "¬øQu√© d√≠a es el que m√°s kWh he consumido?"');
  console.error('  "¬øQu√© mes tuve el mayor consumo promedio?"');
  console.error('  "¬øCu√°l es mi IBAN?"');
  console.error('  "¬øQu√© d√≠as de mayo consum√≠ m√°s de 5 kWh?"');
  console.error('  "¬øCu√°nto pagu√© en total por Derechos de acceso?"');
  console.error(
    '  "¬øEn cu√°ntos domicilios he vivido y cu√°ntos d√≠as en cada uno?"'
  );
  console.error('  "Dime el consumo de todos los fines de semana de mayo"');
  console.error(
    '  "¬øQu√© d√≠a es el que m√°s kWh he consumido en horario Valle?"'
  );
  console.error('  "¬øCu√°nto he pagado total en impuestos?"');
  process.exit(1);
}

const filePath = args[0];
const questions = args.slice(1); // All arguments after the first one are questions

// Check if file exists
if (!fs.existsSync(filePath)) {
  console.error(`Error: El archivo ${filePath} no existe`);
  process.exit(1);
}

// Check if file is a PDF
const fileExtension = extname(filePath).toLowerCase();
if (fileExtension !== ".pdf") {
  console.error(
    `Error: El archivo debe ser un PDF. Archivo proporcionado: ${fileExtension}`
  );
  process.exit(1);
}

async function main() {
  try {
    console.log(
      "üìã AN√ÅLISIS DE FACTURA EL√âCTRICA CON PREGUNTAS PERSONALIZADAS"
    );
    console.log("=".repeat(70));
    console.log(`üìÑ Archivo: ${filePath}`);
    console.log(`‚ùì Preguntas a analizar: ${questions.length}`);

    questions.forEach((question, index) => {
      console.log(`   ${index + 1}. ${question}`);
    });

    console.log("=".repeat(70));

    // Run the complete workflow
    const result = await runFacturaAnalysisWorkflow({
      filePath,
      questions,
    });

    // Display structured data summary
    console.log("üìä RESUMEN DE LA FACTURA:");
    console.log("=".repeat(50));

    const data = result.structuredData;
    console.log(`üë§ Cliente: ${data.customer.name}`);
    console.log(`üìÑ Factura #: ${data.invoice.number}`);
    console.log(`üìÖ Fecha: ${data.invoice.date}`);
    console.log(`üí∂ Total: ‚Ç¨${data.total}`);
    console.log(
      `‚ö° Consumo Promedio Diario: ${data.avg_daily_consumption} kWh`
    );

    console.log("\n" + "=".repeat(70));
    console.log("üí° RESPUESTAS A TUS PREGUNTAS:");
    console.log("=".repeat(70));

    // Display all Q&A results
    result.answers.forEach((qa, index) => {
      console.log(`\n${index + 1}. üîç ${qa.question}`);
      console.log(`   üí° ${qa.answer}`);
      console.log("-".repeat(50));
    });

    console.log("\n‚ú® AN√ÅLISIS COMPLETADO EXITOSAMENTE");

    // Save results to JSON file
    const outputFile = filePath.replace(".pdf", "_custom_analysis.json");
    const outputData = {
      timestamp: new Date().toISOString(),
      inputFile: filePath,
      questionsAsked: questions,
      structuredData: result.structuredData,
      questionsAndAnswers: result.answers,
      summary: {
        totalQuestions: questions.length,
        customerName: data.customer.name,
        invoiceNumber: data.invoice.number,
        totalAmount: data.total,
        avgDailyConsumption: data.avg_daily_consumption,
      },
    };

    fs.writeFileSync(outputFile, JSON.stringify(outputData, null, 2));
    console.log(`üìÅ Resultados guardados en: ${outputFile}`);
  } catch (error) {
    console.error("‚ùå Error en el an√°lisis de la factura:", error);
    process.exit(1);
  }
}

// Run the main function
main().catch((error) => {
  console.error("‚ùå Error inesperado:", error);
  process.exit(1);
});
